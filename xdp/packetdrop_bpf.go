// Code generated by bpf2go; DO NOT EDIT.

package xdp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPacketDrop returns the embedded CollectionSpec for packetDrop.
func loadPacketDrop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PacketDropBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load packetDrop: %w", err)
	}

	return spec, err
}

// loadPacketDropObjects loads packetDrop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*packetDropObjects
//	*packetDropPrograms
//	*packetDropMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPacketDropObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPacketDrop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// packetDropSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetDropSpecs struct {
	packetDropProgramSpecs
	packetDropMapSpecs
	packetDropVariableSpecs
}

// packetDropProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetDropProgramSpecs struct {
	PacketDrop *ebpf.ProgramSpec `ebpf:"packet_drop"`
}

// packetDropMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetDropMapSpecs struct {
	OutputMap *ebpf.MapSpec `ebpf:"output_map"`
}

// packetDropVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetDropVariableSpecs struct {
}

// packetDropObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPacketDropObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetDropObjects struct {
	packetDropPrograms
	packetDropMaps
	packetDropVariables
}

func (o *packetDropObjects) Close() error {
	return _PacketDropClose(
		&o.packetDropPrograms,
		&o.packetDropMaps,
	)
}

// packetDropMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPacketDropObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetDropMaps struct {
	OutputMap *ebpf.Map `ebpf:"output_map"`
}

func (m *packetDropMaps) Close() error {
	return _PacketDropClose(
		m.OutputMap,
	)
}

// packetDropVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadPacketDropObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetDropVariables struct {
}

// packetDropPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPacketDropObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetDropPrograms struct {
	PacketDrop *ebpf.Program `ebpf:"packet_drop"`
}

func (p *packetDropPrograms) Close() error {
	return _PacketDropClose(
		p.PacketDrop,
	)
}

func _PacketDropClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed packetdrop_bpf.o
var _PacketDropBytes []byte
